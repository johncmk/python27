'''Q1'''
a)
def _fib(n,cache = {}):
    if n in cache:
        return n
    cache[n] = 1 if n < 2 else _fib(n-1,cache) + _fib(n-2,cache)
    return cache[n]

b)The time complexity is O(N)	

c)The time complexity without memoization is closest to O(2^n)

'''Q2'''
def _longest(tree):
    if tree == []:
        return 0 , -1
    left,root,right = tree
    l1,d1 = _longest(left)
    l2,d2 = _longest(right)
    return max([d1+d2+2,l1,l2]), max(d1,d2)+1

longest = lambda tree: _longest(tree)[0]

Q:What's the time complexity? Explain why

A:The time complexity is O(N) because we need to pass the all the node  


'''Q3'''
a)
                     5
                    /  \
                  1      6
                  \      
                    4      
                   /         
                  3            


b)
def _qselect(index,tree):
    if tree == []:
        return 0,None
    left,node,right = tree
    
    num,x = _qselect(index,left)
    if index <= num:
        return index,x
    if index == num+1:
        return index,node
    num2,y = _qselect(index-num-1,right)
    return num+num2+1,y
	
def qselect(index,tree): 
	return _qselect(index,tree)[1]	

c)What is the complexity
Worst-case is O(N)
Best-case is O(1)
	
print(_fib(100))